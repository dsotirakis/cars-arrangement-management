doctype html
html
  head
    title Timeline | Editable Groups
    style.
      body, html {
      font-family: arial, sans-serif;
      font-size: 11pt;
      }
      #visualization {
      box-sizing: border-box;
      width: 100%;
      height: 300px;
      }
      .vis-item.openwheel  { background-color: #B0E2FF; }
      .vis-item.rally      { background-color: #EAEAEA; }
      .vis-item.motorcycle { background-color: #FA8072; }
      .vis-item.touringcar { background-color: #B4EEB4; }
      .vis-item.endurance  { background-color: #FFFFCC; }
    script(src='vis/dist/vis.js')
    link(href='vis/dist/vis-timeline-graph2d.min.css', rel='stylesheet', type='text/css')

    script(src='/bower_components/jquery/jquery.min.js')
    script(src='/bower_components/moment/min/moment.min.js')
    script(src='/bower_components/bootstrap/dist/js/bootstrap.min.js')
    script(src='/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js')
    link(rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.min.css')
    link(rel='stylesheet' href='/bower_components/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css')
  body
    p
      | This timeline displays the total booked cars. Every rectangle represents the start and stop date of the event.

    
      h2 Add Car
        form(method='post', action='/addCar')
          br
          select(id = "categ", name="categoryName")
            each category in categories
              option(value=category.categoryName) #{category.categoryName}
          input(class='categ', type='text', name='carName', placeholder='Enter Car Number', required='', autocomplete="off")
          input(class='categ', type='text', name='brand', placeholder='Enter Car Model', required='', autocomplete="off")
          input(type="hidden", name='weight', value = 0)
          input(type='submit', value='Add Car')
        br
     
      if cars.length > 0
        h2 Delete Car
        td
        form(method = 'post', action = '/deleteCar')
          select(id = "carDel", name = "carName", size = cars.length)
            each car in cars
              option(value={'carName':car.carName, 'categoryName':car.categoryName}) #{car.carName + " - " + car.brand}
          br
          input(type= "submit", class = "carDel", value = "Delete Car")

        br
      br

      if cars.length > 0
        h2 Update Car Priority
        form(method = 'post', action = '/updateCar')
          br
          each car in cars
            td #{car.carName + " - Priority Value: " + car.weight + " --> "}
            input(class = "categ", type = 'text',  name = 'weight', value = car.weight)
            input(type = "hidden", value = {'carName' : car.carName,'categoryName' : car.categoryName}, name = 'new')
            br
            br
          input(type = 'submit', value = 'Update Values')


      h2 Add Event
      
      .container
        .row
          .col-sm-6
            .form-group
              #datetimepicker.input-group.date
              input.form-control(type='text')
              span.input-group-addon
                span.glyphicon.glyphicon-calendar
            
                  
          script(src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js").

            $(function () {
              alert(";e;os");          
              $('#datetimepicker').data("DateTimePicker").date();
            });

      if events.length > 0
      h2 Delete Event
        form(method = 'post', action = '/deleteEvent')
          select(id = "evDel", name = "event", size = events.length)
            each event in events    
              option(value = {'id' : event._id , 'categoryName': event.categoryName}) #{event.startDate + " - " + event.endDate + " - Car: " + event.carName}
          br
          input(type= "submit", class = "evDel", value = "Delete Event")
  

      if cars
        each car in cars
          li #{car.carName}
    #visualization
    script.

      var options = {};
      var carsToString = !{JSON.stringify(cars)};
      var arr = [];
      carsToString.sort(function(a,b){return a.weight - b.weight});
      var len = carsToString.length;
      for (var i = 0; i < len; i++) {
        arr.push({"content": i + " - " + carsToString[i].brand + " - " + carsToString[i].carName, "id": carsToString[i].carName, "value": (i+1), className: 'lele'});
      }

      var datas = new vis.DataSet(arr);
      

      // function to make all groups visible again
      function showAllGroups(){
      groups.forEach(function(group){
      groups.update({id: group.id, visible: true});
      })
      };

      var arr2 = [];
      var eventsToString = !{JSON.stringify(events)};

      for (var i = 0; i < eventsToString.length; i++) {
        arr2.push({start: eventsToString[i].startDate, 
                   end: eventsToString[i].endDate, 
                   group: eventsToString[i].carName, 
                   className:eventsToString[i].carName, 
                   content: eventsToString[i].startDate + " - " +  eventsToString[i].endDate, 
                   id:eventsToString[i]._id});
      }

      
      var datas2 = new vis.DataSet(arr2);
      // create a dataset with items
      // note that months are zero-based in the JavaScript Date object, so month 3 is April

      // create visualization
      var container = document.getElementById('visualization');
      var options = {
      // option groupOrder can be a property name or a sort function
      // the sort function must compare two groups and return a value
      //     > 0 when a > b
      //     < 0 when a < b
      //       0 when a == b
      groupOrder: function (a, b) {
      return a.value - b.value;
      },
      groupOrderSwap: function (a, b, groups) {
      var v = a.value;
      a.value = b.value;
      b.value = v;
      },
      groupTemplate: function(group){
      var container = document.createElement('div');
      var label = document.createElement('span');
      label.innerHTML = group.content + ' ';
      container.insertAdjacentElement('afterBegin',label);
      var hide = document.createElement('button');
      hide.innerHTML = 'hide';
      hide.style.fontSize = 'small';
      hide.addEventListener('click',function(){
      groups.update({id: group.id, visible: false});
      });
      container.insertAdjacentElement('beforeEnd',hide);
      return container;
      },
      orientation: 'both',
      editable: true,
      groupEditable: true,
      start: new Date(2017, 12, 1),
      end: new Date(2018, 10, 1)
      };
      var timeline = new vis.Timeline(container);
      timeline.setOptions(options);
      timeline.setGroups(datas);
      timeline.setItems(datas2);
